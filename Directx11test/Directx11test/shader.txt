struct DirectionLight
{
    float3 dir;
    float4 ambient;
    float4 diffuse;
};

cbuffer DirectionLight : register(b0)
{
    DirectionLight dirlight;
};

struct PointLight
{
    float3 dir;
    float3 pos;
    float  range;
    float3 att;
    float4 ambient;
    float4 diffuse;
};

cbuffer PointLight : register(b1)
{
    PointLight pointlight;
};

struct SpotLight
{
    float3 pos;
    float  range;
    float3 dir;
    float cone;
    float3 att;
    float4 ambient;
    float4 diffuse;
};

cbuffer SpotLight : register(b2)
{
    SpotLight spotlight;
};

cbuffer WorldMatrixBuffer : register(b0)
{
    float4x4 WVP;
    float4x4 World;
};

Texture2D ObjTexture;
SamplerState ObjSamplerState;
TextureCube SkyMap;

struct VS_OUTPUT
{
    float4 Pos : SV_POSITION;
    float4 worldPos : POSITION;
    float2 TexCoord : TEXCOORD;
    float3 normal : NORMAL;
};

struct SKYMAP_VS_OUTPUT    
{
    float4 Pos : SV_POSITION;
    float3 texCoord : TEXCOORD;
};

VS_OUTPUT VS(float4 inPos : POSITION, float2 inTexCoord : TEXCOORD, float3 normal : NORMAL)
{
    VS_OUTPUT output;

    output.Pos = mul(inPos, WVP);
    output.worldPos = mul(inPos, World);
    output.normal = mul(normal, World);

    output.TexCoord = inTexCoord;

    return output;
}

float4 PS(VS_OUTPUT input) : SV_TARGET
{
    input.normal = normalize(input.normal);

    float4 diffuse = ObjTexture.Sample( ObjSamplerState, input.TexCoord );

    float3 finalColor = float3(0.0f, 0.0f, 0.0f);

    finalColor = diffuse * dirlight.ambient;
    finalColor += saturate(dot(dirlight.dir, input.normal) * dirlight.diffuse * diffuse);
    
    float3 lightToPixelVec = pointlight.pos - input.worldPos;
    float d = length(lightToPixelVec);
    float3 finalAmbient = diffuse * pointlight.ambient;
    if( d > pointlight.range )
        return float4(finalColor, diffuse.a);
        
    lightToPixelVec /= d; 
    
    float howMuchLight = dot(lightToPixelVec, input.normal);

    if( howMuchLight > 0.0f )
    {    
        finalColor += howMuchLight * diffuse * pointlight.diffuse;
        
        finalColor /= pointlight.att[0] + (pointlight.att[1] * d) + (pointlight.att[2] * (d*d));
    }    
        
    finalColor = saturate(finalColor + finalAmbient);
    
    lightToPixelVec = spotlight.pos - input.worldPos;
    d = length(lightToPixelVec);
    
    finalAmbient = diffuse * spotlight.ambient;

    if( d > spotlight.range )
        return float4(finalColor, diffuse.a);
    
    lightToPixelVec /= d; 
        
    howMuchLight = dot(lightToPixelVec, input.normal);

    if( howMuchLight > 0.0f )
    {    
        finalColor += diffuse * spotlight.diffuse;
                    
        finalColor /= (spotlight.att[0] + (spotlight.att[1] * d)) + (spotlight.att[2] * (d*d));        

        finalColor *= pow(max(dot(-lightToPixelVec, spotlight.dir), 0.0f), spotlight.cone);
    }
    
    finalColor = saturate(finalColor + finalAmbient);

    return float4(finalColor, diffuse.a);
}

SKYMAP_VS_OUTPUT SKYMAP_VS(float3 inPos : POSITION, float2 inTexCoord : TEXCOORD, float3 normal : NORMAL)
{
    SKYMAP_VS_OUTPUT output = (SKYMAP_VS_OUTPUT)0;

    output.Pos = mul(float4(inPos, 1.0f), WVP).xyww;

    output.texCoord = inPos;

    return output;
}

float4 SKYMAP_PS(SKYMAP_VS_OUTPUT input) : SV_Target
{
    return SkyMap.Sample(ObjSamplerState, input.texCoord);
}